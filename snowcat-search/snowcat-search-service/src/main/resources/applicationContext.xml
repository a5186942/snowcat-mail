<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"


>
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:*.properties" />
    <!-- 数据库连接池 -->
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="maxActive" value="10" />
        <property name="minIdle" value="5" />
    </bean>
    <!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:SqlMapConfig.xml" />
    </bean>
    <!--扫描指定包下面的 mybatis映射文件 和接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.snowcat.mapper" />
    </bean>

    <!--扫描service 层的 注解-->
    <context:component-scan base-package="com.snowcat.search.service"></context:component-scan>

    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- 切面 -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(* com.snowcat.search.service.*.*(..))" />
    </aop:config>

    <dubbo:application name="snowcat-search" />
    <dubbo:registry protocol="zookeeper"
                    address="192.168.17.100:2181" />
    <dubbo:protocol name="dubbo" port="20882" />

    <bean class="org.apache.solr.client.solrj.impl.HttpSolrServer" id="httpSolrServer">
        <constructor-arg name="baseURL" value="http://192.168.17.100:8080/solr"></constructor-arg>
    </bean>

    <dubbo:service interface="com.snowcat.search.service.ItemSearchService" ref="itemSearchServiceImpl" timeout="360000"></dubbo:service>



    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://192.168.17.100:61616" />
    </bean>

    <bean id="connectionFactory"
          class="org.springframework.jms.connection.SingleConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="targetConnectionFactory" />
    </bean>


    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>
    <!--    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">-->
    <!--        <constructor-arg>-->
    <!--            <value>spring-queue</value>-->
    <!--        </constructor-arg>-->
    <!--    </bean>-->


    <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg value="addItem" />
    </bean>
    <bean id="myMessageListener" class="com.snowcat.search.listener.MyMessageListener"></bean>

    <!-- 消息监听容器 -->
    <bean class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="topicDestination" />
        <property name="messageListener" ref="myMessageListener" />
    </bean>






    <!--    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">-->
<!--        <constructor-arg>-->
<!--            <value>spring-queue</value>-->
<!--        </constructor-arg>-->
<!--    </bean>-->
    <!--这个是主题目的地，一对多的 -->





    <!--    <dubbo:service interface="com.snowcat.service.ItemService" ref="itemServiceImpl"/>-->
<!--    <dubbo:service interface="com.snowcat.service.ItemCatService" ref="itemCatServiceImpl"/>-->
<!--    <dubbo:service interface="com.snowcat.service.ContentService" ref="contentServiceImpl"></dubbo:service>-->
    <!-- jedis连接池对象-->

<!--    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">-->
<!--        <constructor-arg name="host" value="192.168.17.100"></constructor-arg>-->
<!--        <constructor-arg name="port" value="6379"></constructor-arg>-->
<!--    </bean>-->
<!--    <bean id="jedisClientPool" class="com.snowcat.service.impl.JedisClientPool"/>-->


</beans>
